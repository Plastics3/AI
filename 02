from re import T
import numpy as np
import matplotlib.pyplot as plt
import h5py
import scipy
from scipy import ndimage
from PIL import Image
from unit10 import c1w2_utils as u10
import math

# Loading the data (cat/non-cat)

train_set_x_orig, train_set_y, test_set_x_orig, test_set_y, classes = u10.load_datasetC1W2()

#1
m_train = len(train_set_x_orig)
m_test = len(test_set_x_orig)
num_px = train_set_x_orig.shape[1] 

#2
train_set_x_flatten = train_set_x_orig.reshape(train_set_x_orig.shape[0], -1).T
test_set_x_flatten = X_flatten = test_set_x_orig.reshape(test_set_x_orig.shape[0], -1).T

train_set_x = train_set_x_flatten/255.0
test_set_x = test_set_x_flatten/255.0

#3
def sigmoid(z):
    return 1/(1+pow(math.e,-z))

#4
def initialize_with_zeros(dim):
    return np.zeros((dim,1)), 0 

#5
def forward_propagation(X,Y,w,b):
    A = sigmoid(np.dot(np.transpose(w),X)+b)
    J = (-1/(X.shape[1])) * np.sum(Y*np.log(A) + (1-Y)*np.log(1-A))
    return A, J

#6
def backward_propagation(X,Y,A):
    m = X.shape[1]
    dZ = (1/m) * (A-Y)
    dW = np.dot(X, dZ.T)
    db = (1/m) * np.sum(A-Y)
    return dW, db

#7
def train(X, Y, num_iterations, learning_rate):
    W, b = initialize_with_zeros(X.shape[0])
    for i in range(num_iterations):
        A, cost = forward_propagation(X,Y,W,b)
        dW, db = backward_propagation(X,Y,A)
        W -= learning_rate * dW
        b -= learning_rate * db
    return W,b

#8
def predict(X,W,b):
    A  = sigmoid(np.dot(W.T,X)+b)
    return np.where(A > 0.5,1,0)
#9
W, b = train(train_set_x, train_set_y, num_iterations=4000,
learning_rate=0.005)

Y_prediction_test = predict(test_set_x, W, b)

Y_prediction_train = predict(train_set_x, W, b)

# Print train/test Errors

print("train accuracy: {} %".format(100 -
np.mean(np.abs(Y_prediction_train - train_set_y)) * 100))

print("test accuracy: {} %".format(100 -
np.mean(np.abs(Y_prediction_test - test_set_y)) * 100))
